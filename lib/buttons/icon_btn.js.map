{"version":3,"sources":["../../src/buttons/icon_btn.js"],"names":[],"mappings":"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","file":"icon_btn.js","sourcesContent":["//Libraries\nconst React  = require('react/addons');\nconst _      = require(\"lodash\");\n\n// React-bootstrap: http://react-bootstrap.github.io/\nvar OverlayTrigger = require(\"react-bootstrap/lib/OverlayTrigger\");\nvar Tooltip        = require(\"react-bootstrap/lib/Tooltip\");\n\n//Mixins\nconst cssMixins  = require(\"morse-react-mixins/lib/cssMixin\");\n\nclass IconButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.btn_css  = [\"btn\"];\n    this.icon_css = [\"glyphicon\"];\n    //Sets defaults\n    this.state    = {\n      placement : \"top\",\n      icon      : this.getClasses(this.icon_css),\n      btn       : this.getClasses(this.btn_css)\n    };\n  }\n\n  // Broken into separate function for testing\n  setBtnStyle(type, additional){\n    let bt = (type) ? type : \"default\"; // Sets default btn css\n    this.btn_css.push(`btn-${bt}`);// Adds to btn_css array for re-renders\n    // Conditional loads additional css\n    if(additional){\n      this.btn_css.push(additional);// Adds to btn_css array for re-renders\n    }\n    // Returns css for state\n    return this.getClasses(this.btn_css); // Returns css string\n  }\n\n  setIconStyle(ic){\n    let icon = (ic) ? ic : \"glyphicon-edit\"; //Sets default icon\n    this.icon_css.push(icon);// Adds to icon_css array for re-renders\n\n    return this.getClasses(this.icon_css);// Returns css string\n  }\n\n  componentDidMount() {\n    let options = this.props.options; // Makes reading a bit easier\n    let state   = _.clone(this.state); //clones state so we don't need to recreate structure\n    //Sets placement or default\n    state.placement = (options.placement) ? options.placement : state.placement;\n\n    //sets default btn styling\n    state.btn = this.setBtnStyle(options.button_type, options.additional_css);\n    //Sets default icon styling\n    state.icon = this.setIconStyle(this.props.icon);\n\n    this.setState(state); // Sets state to re-render component with correct classes\n  }\n\n  tooltip() {\n    return (\n      <Tooltip>{this.props.title}</Tooltip>\n    );\n  }\n\n  render() {\n    return (\n      <OverlayTrigger placement={this.state.placement} overlay={this.tooltip()}>\n        <a className={this.state.btn} href={this.props.path}>\n          <span className={this.props.icon}></span>\n        </a>\n      </OverlayTrigger>\n    );\n  }\n}\n\nObject.assign(IconButton.prototype, cssMixins);\n\nmodule.exports = IconButton;\n"]}